{"version":3,"sources":["Finance.js","Research.js","Play.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Finance","defaults","finance","updateMoney","updateStock","updateSalePrice","salePrice","notebooksResearched","stock","money","useState","interest","updateInterest","useEffect","interval","setInterval","calculateInterest","Math","random","sellPaper","floor","clearInterval","selling","toBeSold","enoughStock","className","toFixed","smallestValue","onClick","decreaseSalePrice","increaseSalePrice","renderSaleButtons","Research","researchData","updateEmployees","updateThinkSpeed","updatePaperMakerLevel","updateResearch","updateNotebooksResearched","employees","thinkSpeed","research","paperMakerLevel","stage","think","useCallback","thinker","window","pow","Play","play","updateAutoClickers","updateWood","updatePaper","updateStage","wood","paper","autoClickers","click","randomWood","middle","thunk","persistConfig","key","storage","stateReconciler","autoMergeLevel2","store","createStore","persistReducer","state","action","type","payload","applyMiddleware","persistor","persistStore","configureStore","withRouter","connect","dispatch","savePaper","updPaper","saveAutoClickers","updAutoClickers","saveMoney","updMoney","saveSalePrice","price","saveStock","updStock","saveWood","updWood","saveStage","updStage","saveEmployees","updEmployees","saveResearch","updResearch","saveThinkSpeed","updThinkSpeed","savePaperMakerLevel","updPaperMakerLevel","saveNotebooksResearched","updNotebooksResearched","props","playData","financeData","process","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","Component","App","ReactDOM","render","loading","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.736a79d3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.scss';\r\n\r\nconst Finance = ({defaults, finance}) => {\r\n\r\n  let {\r\n    updateMoney,\r\n    updateStock,\r\n    updateSalePrice,\r\n    salePrice,\r\n    notebooksResearched,\r\n    stock,\r\n    money,\r\n    // paper,\r\n    // wood\r\n  } = finance\r\n\r\n  const [interest, updateInterest] = useState(0.08 / salePrice);  \r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      calculateInterest(salePrice)\r\n      if (stock > 0 && Math.random() < 0.08/salePrice) {\r\n        sellPaper(Math.floor( Math.random() / salePrice ))\r\n      }\r\n    }, 100);\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, [salePrice, money, stock, updateStock, updateMoney]);\r\n\r\n  // Interest in paper, more things can be added to this when we add more boosts and marketing etc.\r\n  const calculateInterest = (salePrice) => {\r\n    updateInterest(0.08 / salePrice);\r\n  }\r\n\r\n  // Increase sale price\r\n  const increaseSalePrice = (updateSalePrice, salePrice) => {\r\n    updateSalePrice(salePrice + 0.01);\r\n  }\r\n\r\n  // Decrease Sale Price\r\n  const decreaseSalePrice = (updateSalePrice, salePrice) => {\r\n    updateSalePrice(salePrice - 0.01);\r\n  }\r\n\r\n  const sellNotebook = () => {\r\n    updateStock(stock - 20);\r\n    updateMoney(money + 2);\r\n  }\r\n\r\n  // Sell paper\r\n  const sellPaper = (selling) => {\r\n    var toBeSold = selling > 10 ? 10 : selling\r\n    if (stock > 0) {\r\n      const enoughStock = toBeSold < stock;\r\n      updateStock(enoughStock ? stock - toBeSold : 0);\r\n      updateMoney(enoughStock ? money + (salePrice * toBeSold) : money + (salePrice * toBeSold - (((stock - toBeSold) * -1) * salePrice)))\r\n    }\r\n  }\r\n\r\n  const renderSaleButtons = () => {\r\n    const smallestValue = salePrice >= 0.01;\r\n    return (\r\n      <div className='saleButtons'>\r\n        <div className={smallestValue ? 'clicker' : 'clicker disabled'} onClick={smallestValue ? () => decreaseSalePrice(updateSalePrice, salePrice) : ''}>\r\n          Decrease Price\r\n        </div>\r\n        <div className='clicker' onClick={() => increaseSalePrice(updateSalePrice, salePrice)}>\r\n          Increase Price\r\n        </div>\r\n      </div>\r\n      )\r\n    }\r\n\r\n  const renderSellNotebook = () => {\r\n    return (\r\n      <div className={stock >= 20 ? 'clicker' : 'clicker disabled'} onClick={stock >= 20 ? () => sellNotebook() : ''}>\r\n        Sell Notebook (£2 - 20 Paper)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className='clicks'>\r\n      Stock: {stock}\r\n      </p>\r\n      <p className='clicks'>\r\n        Money: £{money.toFixed(2)}\r\n      </p>\r\n      <p className='clicks'>\r\n        Public Interest: {(interest*100).toFixed(2)}%\r\n      </p>\r\n      <p className='clicks'>\r\n        Selling Price: £{salePrice.toFixed(2)}\r\n      </p>\r\n      {renderSaleButtons()}\r\n      {notebooksResearched ? renderSellNotebook() : ''}\r\n    </div>  \r\n  )\r\n}\r\n\r\nexport default Finance;\r\n","import React, { useCallback } from 'react';\r\nimport './App.scss';\r\n\r\nconst Research = ({defaults, researchData}) => {\r\n\r\n  let {\r\n    updateEmployees,\r\n    updateMoney,\r\n    updateThinkSpeed,\r\n    updatePaperMakerLevel,\r\n    updateResearch,\r\n    updateNotebooksResearched,\r\n    employees,\r\n    money,\r\n    thinkSpeed,\r\n    research,\r\n    paperMakerLevel,\r\n    stage,\r\n    notebooksResearched\r\n  } = researchData;\r\n\r\n  const think = useCallback(() => {\r\n    updateResearch(research + 1);\r\n  }, [research, updateResearch])\r\n\r\n  const thinker = useCallback(() => {\r\n    const interval = window.setInterval(() => think(),\r\n      (1000 / Math.pow(thinkSpeed, employees + thinkSpeed)))\r\n\r\n    return () => {\r\n      clearInterval(interval)\r\n    }\r\n  }, [think, thinkSpeed, employees])\r\n\r\n  const hireEmployees = () => {\r\n    updateEmployees(employees + 1);\r\n    updateMoney(money - 500);\r\n    thinker();\r\n  }\r\n      \r\n  const trainEmployees = () => {\r\n    updateThinkSpeed(thinkSpeed + 1);\r\n    updateMoney(money - 1000);\r\n    thinker();\r\n  }\r\n\r\n  const upgradePaperMaker = () => {\r\n    updatePaperMakerLevel(paperMakerLevel + 1)\r\n    updateResearch(research - (Math.pow(paperMakerLevel,2) * 500))\r\n  }\r\n\r\n  const researchNotebooks = () => {\r\n    updateResearch(research - 1000);\r\n    updateNotebooksResearched(true);\r\n  }\r\n\r\n  const renderResearchNotebooks = () => {\r\n    return (\r\n      <div className={research > 1000 ? 'clicker' : 'clicker disabled'} onClick={research > 1000 ? () => researchNotebooks() : ''}>\r\n        Research Notebooks (1000 Research)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderUpgradePaperMaker = () => {\r\n    return (\r\n      <div className={research > Math.pow(paperMakerLevel,2) * 500 ? 'clicker' : 'clicker disabled'} onClick={research > Math.pow(paperMakerLevel,2) * 500 ? () => upgradePaperMaker() : ''}>\r\n        Upgrade Paper Makers ({Math.pow(paperMakerLevel,2) * 500} Research)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <p className='clicks'>\r\n        Research: {research}\r\n      </p>\r\n      <p className='clicks'>\r\n        Employees: {employees}\r\n      </p>\r\n      <p className='clicks'>\r\n        Think Speed: {thinkSpeed}\r\n      </p>\r\n      {stage > 1 ?\r\n        <div> \r\n          <div className={money >= 500 ? 'clicker' : 'clicker disabled'} onClick={money >= 500 ? () => hireEmployees() : ''}>\r\n          Hire Employees (£500)\r\n          </div>\r\n          <div className={money >= 1000 ? 'clicker' : 'clicker disabled'} onClick={money >= 1000 ? () => trainEmployees() : ''}>\r\n            Train Employees (£1000)\r\n          </div>\r\n        </div>\r\n      : ''}\r\n      {renderUpgradePaperMaker()}\r\n      {notebooksResearched ? '' : renderResearchNotebooks()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Research;\r\n","import React, { useEffect } from 'react';\r\n\r\nconst Play = ({defaults, play}) => {\r\n\r\n  let {\r\n    updateAutoClickers,\r\n    updateMoney,\r\n    updateWood,\r\n    updatePaper,\r\n    updateStock,\r\n    updateStage,\r\n    // updatePaperMakerLevel,\r\n    money,\r\n    wood,\r\n    stock,\r\n    paper,\r\n    stage,\r\n    autoClickers,\r\n    paperMakerLevel\r\n  } = play;\r\n\r\n  /*\r\n  *   Run on App Load, check if any existing auto clickers saved and add an interval for every single one\r\n  *   Then start the infinite selling loop\r\n  */\r\n  useEffect(() => {\r\n    let interval;\r\n    if (autoClickers > 0) {\r\n      // Simulate level of auto clickers from previous save\r\n      interval = window.setInterval(() => click(), (1000 / paperMakerLevel) / autoClickers)\r\n    }\r\n\r\n    return () => {\r\n      if (interval) clearInterval(interval)\r\n    };\r\n  }, [autoClickers, paperMakerLevel, paper, stock, wood]);\r\n\r\n  // Add a new auto clicker\r\n  const autoClickerAdd = () => {\r\n    updateAutoClickers(autoClickers + 1);\r\n    updateMoney(money-25);\r\n    // After adding new clicker, add manual interval to the timer\r\n    window.setInterval(() => click(), 1000 / paperMakerLevel)\r\n  }\r\n\r\n  // Add more wood\r\n  const chopWood = () => {\r\n    updateWood(wood + 800);\r\n    updateMoney(money - 50);\r\n  }\r\n\r\n  // Add paper to the paper total\r\n  const click = () => {\r\n    if (wood > 0) {\r\n      var randomWood = wood - Math.random()\r\n      updatePaper(paper+1);\r\n      updateStock(stock+1);\r\n      updateWood(randomWood > 0 ? randomWood : 0);\r\n    }\r\n  }\r\n\r\n  const renderClickButton = () => {\r\n    return (\r\n      <div className='clicker' onClick={() => click()}>\r\n        Make Paper\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderAutoClickButton = () => {\r\n    return (\r\n      <div className={money > 25 ? 'clicker' : 'clicker disabled'} onClick={money > 25 ? () => autoClickerAdd() : ''}>\r\n        Buy Auto Paper Maker (£25)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderChopWoodButton = () => {\r\n    return (\r\n      <div className={money > 50 ? 'clicker' : 'clicker disabled'} onClick={money > 50 ? () => chopWood() : ''}>\r\n        Chop Down Wood (£50)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderResearchTeamButton = () => {\r\n    return (\r\n      <div className={money > 1000 ? 'clicker' : 'clicker disabled'} \r\n      onClick={money > 1000 ? () => {\r\n        updateStage(2)\r\n        updateMoney(money - 1000)} : ''}\r\n      >\r\n        Buy Research Team (£1000)\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <p className='clicks'>\r\n          Total Paper: {paper}\r\n        </p>\r\n        <p className='clicks'>\r\n          Paper Per Second: {autoClickers}\r\n        </p>\r\n        <p className='clicks'> \r\n          Remaining Wood: {wood.toFixed(2)}\r\n        </p>\r\n        {renderClickButton()}\r\n        {paper > 100 ? renderAutoClickButton() : ''}\r\n        {paper > 500 ? renderChopWoodButton() : ''}\r\n        {(paper > 2000 && stage === 1) ? renderResearchTeamButton() : ''}\r\n      </div>\r\n    </>      \r\n  )\r\n}\r\n\r\nexport default Play;\r\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nlet middle = [thunk];\n\nconst persistConfig = {\n  key: 'root',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst actions = (state, action) => {\n  switch (action.type) {\n    /*case \"example\":\n      return {\n        ...state,\n        exampleNewProp: action.payload\n      };\n    */\n\n    case \"updatePaper\":\n      return {\n        ...state,\n        paper: action.payload\n      }\n    \n    case \"updateAutoClickers\":\n      return {\n        ...state,\n        autoClickers: action.payload\n      }\n\n    case \"updateMoney\":\n      return {\n        ...state,\n        money: action.payload\n      }\n\n    case \"updateSalePrice\":\n      return {\n        ...state,\n        salePrice: action.payload\n      }\n    \n    case \"updateStock\":\n      return {\n        ...state,\n        stock: action.payload\n      }\n      \n    case \"updateWood\":\n      return {\n        ...state,\n        wood: action.payload\n      }\n\n    case \"updateStage\":\n      return {\n        ...state,\n        stage: action.payload\n      }\n    \n    case \"updateEmployees\":\n      return {\n        ...state,\n        employees: action.payload\n      }\n    \n    case \"updateResearch\":\n      return {\n        ...state,\n        research: action.payload\n      }\n\n    case \"updateThinkSpeed\":\n      return {\n        ...state,\n        thinkSpeed: action.payload\n      }\n\n    case \"updatePaperMakerLevel\":\n      return {\n        ...state,\n        paperMakerLevel: action.payload\n      }\n\n    case \"updateNotebooksResearched\":\n      return {\n        ...state,\n        notebooksResearched: action.payload\n      }\n\n    default: {\n      return state;\n    }\n  }\n};\n\n/*export const examplePropMethod = {\n  type: \"example\",\n  payload: true\n};\n*/\n\nexport const updPaper = (paper) => {\n  return {\n    type: \"updatePaper\",\n    payload: paper\n  }\n}\n\nexport const updAutoClickers = (autoClickers) => {\n  return {\n    type: \"updateAutoClickers\",\n    payload: autoClickers\n  }\n}\n\nexport const updMoney = (money) => {\n  return {\n    type: \"updateMoney\",\n    payload: money\n  }\n}\n\nexport const updSalePrice = (salePrice) => {\n  return {\n    type: \"updateSalePrice\",\n    payload: salePrice\n  }\n}\n\nexport const updStock = (stock) => {\n  return {\n    type: \"updateStock\",\n    payload: stock\n  }\n}\n\nexport const updWood = (wood) => {\n  return {\n    type: \"updateWood\",\n    payload: wood\n  }\n}\n\nexport const updStage = (stage) => {\n  return {\n    type: \"updateStage\",\n    payload: stage\n  }\n}\n\nexport const updEmployees = (employees) => {\n  return {\n    type: \"updateEmployees\",\n    payload: employees\n  }\n}\n\nexport const updResearch = (research) => {\n  return {\n    type: \"updateResearch\",\n    payload: research\n  }\n}\n\nexport const updThinkSpeed = (thinkSpeed) => {\n  return {\n    type: \"updateThinkSpeed\",\n    payload: thinkSpeed\n  }\n}\n\nexport const updPaperMakerLevel = (paperMakerLevel) => {\n  return {\n    type: \"updatePaperMakerLevel\",\n    payload: paperMakerLevel\n  }\n}\n\nexport const updNotebooksResearched = (notebooksResearched) => {\n  return {\n    type: \"updateNotebooksResearched\",\n    payload: notebooksResearched\n  }\n}\n\nconst configureStore = () => {\n  if (module.hot) {\n    module.hot.accept(actions, () => {\n      store.replaceReducer(actions);\n    });\n  }\n  return store ;\n};\n\nexport const store = createStore (\n  persistReducer(persistConfig, actions),\n  {},\n  applyMiddleware(...middle)\n  );\nexport const persistor = persistStore(store);\n\nexport default configureStore;","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter} from 'react-router-dom';\r\nimport Finance from './Finance';\r\nimport Research from './Research';\r\nimport Play from './Play';\r\nimport { updPaper, updAutoClickers, updMoney, updSalePrice, updStock, updWood, updStage, updEmployees, updResearch, updThinkSpeed, updPaperMakerLevel, updNotebooksResearched } from './store';\r\n\r\nconst App = (props) => {\r\n  const [paper, updatePaper] = useState(props.paper || 0);\r\n  const [stock, updateStock] = useState(props.stock || 0);\r\n  const [autoClickers, updateAutoClickers] = useState(props.autoClickers || 0);\r\n  const [money, updateMoney] = useState(props.money || 0);\r\n  const [salePrice, updateSalePrice] = useState(props.salePrice || 0.25);\r\n  const [wood, updateWood] = useState(props.wood === 0 ? 0 : props.wood || 1000);\r\n  const [stage, updateStage] = useState(props.stage || 1);\r\n  const [employees, updateEmployees] = useState(props.employees || 1);\r\n  const [research, updateResearch] = useState(props.research || 0);\r\n  const [thinkSpeed, updateThinkSpeed] = useState(props.thinkSpeed || 1);\r\n  const [paperMakerLevel, updatePaperMakerLevel] = useState(props.paperMakerLevel || 1);\r\n  const [notebooksResearched, updateNotebooksResearched] = useState(props.notebooksResearched || false);\r\n\r\n  useEffect(() => {\r\n    props.savePaper(paper);\r\n    props.saveStock(stock);\r\n    props.saveAutoClickers(autoClickers);\r\n    props.saveMoney(money);\r\n    props.saveSalePrice(salePrice);\r\n    props.saveWood(wood);\r\n    props.saveStage(stage);\r\n    props.saveEmployees(employees);\r\n    props.saveResearch(research);\r\n    props.saveThinkSpeed(thinkSpeed);\r\n    props.savePaperMakerLevel(paperMakerLevel);\r\n    props.saveNotebooksResearched(notebooksResearched);\r\n  }, [props, paper, stock, autoClickers, money, salePrice, wood, stage, employees, research, thinkSpeed, paperMakerLevel, notebooksResearched])\r\n\r\n\r\n  const playData = {\r\n    updateAutoClickers,\r\n    updateMoney,\r\n    updateWood,\r\n    updatePaper,\r\n    updateStock,\r\n    updateStage,\r\n    updatePaperMakerLevel,\r\n    money,\r\n    wood,\r\n    stock,\r\n    paper,\r\n    stage,\r\n    autoClickers,\r\n    paperMakerLevel\r\n  }\r\n\r\n  const financeData = {\r\n    updateMoney,\r\n    updateStock,\r\n    updateSalePrice,\r\n    salePrice,\r\n    notebooksResearched,\r\n    stock,\r\n    money,\r\n    paper,\r\n    wood\r\n  }\r\n\r\n  const researchData = {\r\n    updateEmployees,\r\n    updateMoney,\r\n    updateThinkSpeed,\r\n    updatePaperMakerLevel,\r\n    updateResearch,\r\n    updateNotebooksResearched,\r\n    employees,\r\n    money,\r\n    thinkSpeed,\r\n    research,\r\n    paperMakerLevel,\r\n    stage,\r\n    notebooksResearched\r\n  };\r\n  const renderDevToolbar = () => {\r\n    //     updateAutoClickers,\r\n    // updateMoney,\r\n    // updateWood,\r\n    // updatePaper,\r\n    // updateStock,\r\n    // updateStage,\r\n    return <div className={'devToolbar'}>\r\n      <label>Stage: <input type='text' value={stage} onChange={(e) => updateStage(parseInt(e.target.value) || 1)} /></label>\r\n      <label>Paper: <input type='text' value={paper} onChange={(e) => updatePaper(parseInt(e.target.value))} /></label>\r\n      <label>Wood: <input type='text' value={wood} onChange={(e) => updateWood(parseInt(e.target.value))} /></label>\r\n      <label>Stock: <input type='text' value={stock} onChange={(e) => updateStock(parseInt(e.target.value))} /></label>\r\n      <label>Money: <input type='text' value={money} onChange={(e) => updateMoney(parseInt(e.target.value))} /></label>\r\n      <label>paperMakerLevel: <input type='text' value={paperMakerLevel} onChange={(e) => updatePaperMakerLevel(parseInt(e.target.value))} /></label>\r\n      <label>autoClickers: <input type='text' value={autoClickers} onChange={(e) => updateAutoClickers(parseInt(e.target.value))} /></label>\r\n      <label>thinkSpeed: <input type='text' value={thinkSpeed} onChange={(e) => updateThinkSpeed(parseInt(e.target.value))} /></label>\r\n      <label>employees: <input type='text' value={employees} onChange={(e) => updateEmployees(parseInt(e.target.value))} /></label>\r\n      <label>notebooksResearched: <input type='checkbox' value={notebooksResearched} onChange={(e) => updateNotebooksResearched(e.target.value)} /></label>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {process.env.NODE_ENV === 'development' && renderDevToolbar()}\r\n      <div className={paper > 10 ? \"finances\" : \"finances hidden\"}>\r\n        <Finance defaults={props} finance={financeData} />\r\n      </div>\r\n      <div className=\"play\">\r\n        <Play defaults={props} play={playData} />\r\n      </div>\r\n      <div className={stage > 1 ? \"researchTeam\" : \"researchTeam hidden\"}>\r\n        <Research defaults={props} researchData={researchData} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    savePaper: (paper) => {\r\n      dispatch(updPaper(paper))\r\n    },\r\n    saveAutoClickers: (autoClickers) => {\r\n      dispatch(updAutoClickers(autoClickers))\r\n    },\r\n    saveMoney: (money) => {\r\n      dispatch(updMoney(money))\r\n    },\r\n    saveSalePrice: (price) => {\r\n      dispatch(updSalePrice(price))\r\n    },\r\n    saveStock: (stock) => {\r\n      dispatch(updStock(stock))\r\n    },\r\n    saveWood: (wood) => {\r\n      dispatch(updWood(wood))\r\n    },\r\n    saveStage: (stage) => {\r\n      dispatch(updStage(stage))\r\n    },\r\n    saveEmployees: (employees) => {\r\n      dispatch(updEmployees(employees))\r\n    },\r\n    saveResearch: (research) => {\r\n      dispatch(updResearch(research))\r\n    },\r\n    saveThinkSpeed: (thinkSpeed) => {\r\n      dispatch(updThinkSpeed(thinkSpeed))\r\n    },\r\n    savePaperMakerLevel: (paperMakerLevel) => {\r\n      dispatch(updPaperMakerLevel(paperMakerLevel))\r\n    },\r\n    saveNotebooksResearched: (notebooksResearched) => {\r\n      dispatch(updNotebooksResearched(notebooksResearched))\r\n    }\r\n  }};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps) (App));\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from  'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport configureStore from './store';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/lib/integration/react';\r\nimport { persistor, store } from './store';\r\n\r\n/*  Frontend Structure:\r\n*   1. configureStore() => Create store (load previous store)\r\n*   2. render(App) =>\r\n*       2a. Set Provider as Store (use store info for frontend storage)\r\n*       2b. Use PersistGate to send user to LoginPage if not logged in, and keep user logged in after refresh \r\n*       2c. Use BrowserRouter and Component to render current page of the App\r\n*/\r\n\r\nconfigureStore();\r\n\r\nconst render = Component => {\r\n   return ReactDOM.render(\r\n    <Provider store={store}>\r\n      <PersistGate loading={''} persistor={persistor}>  \r\n       <BrowserRouter>\r\n         <Component />\r\n       </BrowserRouter>\r\n      </PersistGate>\r\n     </Provider>,\r\n     document.getElementById('root')\r\n   );\r\n };\r\n\r\nrender(App);\r\n\r\nif (module.hot) {\r\n   module.hot.accept('./App', () => {\r\n      const NextApp = require('./App').default;\r\n      render(NextApp);\r\n   });\r\n}\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}